# tournament_v3.3 ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º TXT
import json
import re
import asyncio
import sys
from datetime import datetime
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = "8132715978:AAHztRVmUQsnXsNtQaOyS6yGAdicZY53Swk"  # <-- —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = [6904742757, 1450296021]  # <-- —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
DATA_FILE = Path("players.json")

# ========== –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ==========
def load_data():
    if DATA_FILE.exists():
        try:
            return json.loads(DATA_FILE.read_text(encoding="utf-8"))
        except Exception as e:
            print(f"[ERROR] cannot read {DATA_FILE}: {e}", file=sys.stderr)
            return {"tournament_name": None, "tournament_active": False, "players": []}
    return {"tournament_name": None, "tournament_active": False, "players": []}

def save_data(data):
    try:
        DATA_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        print(f"[ERROR] cannot write {DATA_FILE}: {e}", file=sys.stderr)

# ========== –ë–û–¢ ==========
bot = Bot(token=TOKEN)
dp = Dispatcher()

def log(s: str):
    print(s)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö ==========
# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ==========
@dp.message()
async def main_handler(message: Message):
    try:
        user_id = message.from_user.id if message.from_user else None
        text_raw = (message.text or "") + " " + (message.caption or "")
        text = text_raw.strip()
        text_lower = text.lower()
        chat = message.chat
        log(f"[MSG] from={user_id} chat={chat.id} text={text!r}")

        data = load_data()

        # ===== –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ =====
        if text.startswith("/") and user_id in ADMIN_ID:

            # /start_tournament
            if text_lower.startswith("/start_tournament"):
                dp.tournament_name_wait = True
                await message.reply("üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ /–∫–æ–º–∞–Ω–¥).")
                log("[ACTION] waiting for tournament name from admin")
                return

            # /stop_tournament
            if text_lower.startswith("/stop_tournament"):
                if not data.get("tournament_active"):
                    await message.reply("‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    return
                data["tournament_active"] = False
                save_data(data)
                dp.tournament_name_wait = False
                await message.reply("üõë –¢—É—Ä–Ω–∏—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
                log("[ACTION] tournament stopped")
                return

            # /list
            if text_lower.startswith("/list"):
                players = data.get("players", [])
                name = data.get("tournament_name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                if not players:
                    await message.reply(f"üì≠ –í —Ç—É—Ä–Ω–∏—Ä–µ ¬´{name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                else:
                    text_out = (
                        f"üìã –¢—É—Ä–Ω–∏—Ä: {name}\n"
                        + "\n".join([f"{i+1}. {p}" for i, p in enumerate(players)])
                    )
                    await message.reply(text_out)
                log("[ACTION] list shown")
                return

            # /add
            if text_lower.startswith("/add"):
                parts = text.split()
                if len(parts) < 2:
                    await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add @username")
                    return
                username = parts[1]
                if username not in data["players"]:
                    data["players"].append(username)
                    save_data(data)
                    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {username}")
                    log(f"[ACTION] added {username}")
                else:
                    await message.reply(f"‚ö†Ô∏è {username} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
                return

            # /remove
            if text_lower.startswith("/remove"):
                parts = text.split()
                if len(parts) < 2:
                    await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /remove @username")
                    return
                username = parts[1]
                if username in data["players"]:
                    data["players"].remove(username)
                    save_data(data)
                    await message.reply(f"üóë –£–¥–∞–ª—ë–Ω: {username}")
                    log(f"[ACTION] removed {username}")
                else:
                    await message.reply("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ—Ç.")
                return

    
                        # /clear
            if text_lower.startswith("/clear"):
                if not data.get("tournament_active"):
                    await message.reply("‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                    log("[INFO] clear ignored ‚Äî tournament inactive")
                    return

                data["players"] = []
                save_data(data)
                await message.reply("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")
                log("[ACTION] cleared list")
                return
            
            
            # /export ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            if text_lower.startswith("/export"):
                players = data.get("players", [])
                name = data.get("tournament_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")

                lines = [
                    f"üèÜ –¢—É—Ä–Ω–∏—Ä: {name}",
                    f"üìÖ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç: {timestamp}",
                    "",
                    "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:",
                ]
                if players:
                    lines += [f"{i+1}. {p}" for i, p in enumerate(players)]
                else:
                    lines.append("‚Äî –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî")

                content = "\n".join(lines)
                export_path = Path("players.txt")
                export_path.write_text(content, encoding="utf-8")

                file = FSInputFile(str(export_path))
                await message.reply_document(document=file, caption="üìÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞")
                log("[ACTION] exported TXT file")
                return

            # /status
            if text_lower.startswith("/status"):
                name = data.get("tournament_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                state = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if data.get("tournament_active") else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                await message.reply(f"üèÜ –¢—É—Ä–Ω–∏—Ä: {name}\n–°—Ç–∞—Ç—É—Å: {state}")
                return

            # /help
            if text_lower.startswith("/help"):
                await message.reply(
                    "üìò –ö–æ–º–∞–Ω–¥—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤):\n"
                    "/start_tournament ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä\n"
                    "/stop_tournament ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
                    "/add @user ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                    "/remove @user ‚Äî —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
                    "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
                    "/export ‚Äî —Å–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
                    "/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"
                )
                return

            await message.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help")
            return

        # ===== –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ =====
        if getattr(dp, "tournament_name_wait", False) and user_id in ADMIN_ID:
            if text.startswith("/"):
                await message.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ /–∫–æ–º–∞–Ω–¥—ã.")
                return
            data["tournament_name"] = text
            data["players"] = []
            data["tournament_active"] = True
            save_data(data)
            dp.tournament_name_wait = False
            await message.reply(f"‚úÖ –¢—É—Ä–Ω–∏—Ä ¬´{text}¬ª –Ω–∞—á–∞—Ç!\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º—ã (@username) –≤ —á–∞—Ç.")
            log(f"[ACTION] tournament started: {text}")
            return

        # ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—è—Ö –∫ —Ñ–æ—Ç–æ) =====
        if data.get("tournament_active"):
            usernames = re.findall(r"@\w+", text)
            if usernames:
                added = []
                for u in usernames:
                    if u not in data["players"]:
                        data["players"].append(u)
                        added.append(u)
                if added:
                    save_data(data)
                    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(added)}")
                    log(f"[ACTION] users added: {added}")
            return

    except Exception as exc:
        import traceback
        traceback.print_exc()
        try:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        except Exception:
            pass

# ========== –ó–ê–ü–£–°–ö ==========
async def main():
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
